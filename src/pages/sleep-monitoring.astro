---
import Layout from '../layouts/Layout.astro';
import Sidebar from '../components/Sidebar.astro';
import Header from '../components/Header.astro';
import DeviceList from '../components/DeviceList';
import SleepSummary from '../components/SleepSummary';
import SleepTrackingChart from '../components/SleepTrackingChart';
import SleepChart from '../components/SleepChart';
import SleepAnalytics from '../components/SleepAnalytics';
import { api } from '../utils/api';
import type { Device, Health, SleepData } from '../types';
import StatisticsCards from '../components/StatisticsCards';

// Fetch data devices
let devices: Device[] = [];
try {
  devices = await api.getAllDevices();
  // Sort devices alphabetically by name
  devices.sort((a, b) => {
    const nameA = (a.name || 'Unnamed Device').toLowerCase();
    const nameB = (b.name || 'Unnamed Device').toLowerCase();
    return nameA.localeCompare(nameB);
  });
} catch (error) {
  console.error('Error fetching devices:', error);
}

// Fetch getDeviceSleepData
let sleepByDevice: SleepData[] = [];
try {
  if (devices.length > 0) {
    const today = new Date();
    const startDate = new Date(today);
    startDate.setDate(today.getDate() - 7); // Default 7 hari terakhir

    sleepByDevice = await api.getDeviceSleepData(
      devices[0].id,
      startDate.toISOString(),
      today.toISOString()
    );
  }
} catch (error) {
  console.error('Error fetching sleep by device:', error);
}

// Fetch all sleep data untuk menghitung total sleep records
let allSleepData: SleepData[] = [];
let sleepRecordsCount = 0;
try {
  if (devices.length > 0) {
    const deviceIds = devices.map(d => d.id).join(',');
    allSleepData = await api.getAllSleepData(deviceIds);
    
    // Hitung Normal Sleep + Abnormal Sleep (exclude No Data)
    sleepRecordsCount = allSleepData.filter(sleep => sleep.sleepTotalTime > 0).length;
  }
} catch (error) {
  console.error('Error fetching all sleep data:', error);
}

---

<script define:vars={{ devices }}>
  // Initialize state
  let selectedDeviceId = null;
  let startDate = null;
  let endDate = null;

  // Initialize with first device if available
  if (devices.length > 0) {
    selectedDeviceId = devices[0].id;
  }

  endDate = document.getElementById('datepicker-range-end')?.value;
  startDate = endDate;
  // Add event listener for device selection and date range
  document.addEventListener('DOMContentLoaded', () => {
    // Device selection handler
    document.addEventListener('device-select', (e) => {
      selectedDeviceId = e.detail.deviceId;
      if (startDate && endDate) {
        fetchSleepData(selectedDeviceId, startDate, endDate);
      }
    });

    // Date range handler
    document.addEventListener('datepicker-range-start', (e) => {
      startDate = e.detail.start;
      endDate = e.detail.end;
      if (selectedDeviceId) {
        fetchSleepData(selectedDeviceId, startDate, endDate);
      }
    });


  });

  async function fetchSleepData(deviceId = null, start = null, end = null) {
    if (!deviceId) {
      console.warn('No device selected, skipping fetchSleepData');
      return; // Exit the function if deviceId is null or empty
    }

    try {
      const data = await window.api.getDeviceSleepData(deviceId, start, end);
      document.dispatchEvent(new CustomEvent('sleep-data-update', { detail: data }));
    } catch (error) {
      console.error('Error fetching sleep data:', error);
    }
  }
</script>

<Layout title="Smartwatch Monitoring Solution">
  <Sidebar />
  <Header title="Dashboard" />

  <main class="ml-0 md:ml-64 pt-20 p-6">
    <div class="grid grid-cols-1 gap-6">
      <StatisticsCards
        client:load
        deviceCount={devices.filter(device => device.status === 'published').length}
        sleepRecordsCount={sleepRecordsCount}
        heartRateStats={{
          avgBpm: 80,
          maxBpm: 100,
          minBpm: 60
        }}
        sleepStats={{
          avgDuration: 8,
          maxDuration: 10,
          minDuration: 6
        }}
      />

      <!-- Users and Health Tracking -->
      <div class="flex flex-col md:flex-row gap-6">
        <DeviceList
          devices={devices}
          data-device-list
          client:load
          className="md:flex-2"
        />
        <SleepChart
          sleepData={sleepByDevice}
          devices={devices}
          client:load
          className="md:flex-1"
        />
      </div>

      <!-- Sleep Monitoring and Summary -->
      <div class="grid grid-cols-1 gap-6">
        <SleepTrackingChart
          sleepData={sleepByDevice}
          selectedDeviceId={devices[0].id}
          client:load
          className="md:flex-1"
        />
      </div>
    </div>
  </main>
</Layout>

