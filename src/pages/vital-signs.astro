---
import Layout from '../layouts/Layout.astro';
import Sidebar from '../components/Sidebar.astro';
import Header from '../components/Header.astro';
import DatePickerCard from '../components/DatePickerCard.astro';
import VitalSignsDeviceList from '../components/VitalSignsDeviceList';
import HealthChart from '../components/HealthChart';
import StatisticsCards from '../components/StatisticsCards';
import { api } from '../utils/api';
import type { Device, Health, SleepData } from '../types';
import moment from 'moment';

// Fetch data devices
let devices: Device[] = [];
try {
  const result = await api.getAllDevices();
  devices = result || [];
} catch (error) {
  console.error('Error fetching devices:', error);
  devices = [];
}

// Fetch all sleep data untuk menghitung total sleep records
let allSleepData: SleepData[] = [];
let sleepRecordsCount = 0;
try {
  if (devices.length > 0) {
    const deviceIds = devices.map(d => d.id).join(',');
    const result = await api.getAllSleepData(deviceIds);
    allSleepData = result || [];
    
    // Hitung Normal Sleep + Abnormal Sleep (exclude No Data)
    sleepRecordsCount = allSleepData.filter(sleep => sleep.sleepTotalTime > 0).length;
  }
} catch (error) {
  console.error('Error fetching all sleep data:', error);
  allSleepData = [];
}

// Fetch health data untuk statistik
let healthData: Health[] = [];
let healthStats = {
  heartRate: { max: 0, min: 0, avg: 0 },
  bloodOxygen: { max: 0, min: 0, avg: 0 },
  abnormalHeartRate: 0,
  abnormalBloodOxygen: 0
};

try {
  const result = await api.getAllHealthData();
  healthData = Array.isArray(result) ? result : [];
  
  if (healthData.length > 0) {
    // Process heart rate data
    const heartRateData = healthData.filter(h => h.data_type === 'heart_rate').map(h => parseFloat(h.string_val.toString()));
    if (heartRateData.length > 0) {
      healthStats.heartRate.max = Math.max(...heartRateData);
      healthStats.heartRate.min = Math.min(...heartRateData);
      healthStats.heartRate.avg = Math.round(heartRateData.reduce((a, b) => a + b, 0) / heartRateData.length);
      // Abnormal heart rate: < 60 or > 100 bpm
      healthStats.abnormalHeartRate = heartRateData.filter(hr => hr < 60 || hr > 100).length;
    }
    
    // Process blood oxygen data
    const bloodOxygenData = healthData.filter(h => h.data_type === 'blood_oxygen').map(h => parseFloat(h.string_val.toString()));
    if (bloodOxygenData.length > 0) {
      healthStats.bloodOxygen.max = Math.max(...bloodOxygenData);
      healthStats.bloodOxygen.min = Math.min(...bloodOxygenData);
      healthStats.bloodOxygen.avg = Math.round(bloodOxygenData.reduce((a, b) => a + b, 0) / bloodOxygenData.length);
      // Abnormal blood oxygen: < 95%
      healthStats.abnormalBloodOxygen = bloodOxygenData.filter(bo => bo < 95).length;
    }
  }
} catch (error) {
  console.error('Error fetching health data:', error);
}
---

<script>
  // Initialize state
  let selectedDeviceId: string | null = null;
  let startDate: string | null = null;
  let endDate: string | null = null;

  // Add event listener for device selection and date range
  document.addEventListener('DOMContentLoaded', () => {
    // Device selection handler
    document.addEventListener('device-select', ((e: CustomEvent) => {
      if (!e.detail) {
        console.warn('Device select event detail is null');
        return;
      }
      selectedDeviceId = e.detail.deviceId;
      if (startDate && endDate) {
        // Trigger health data update
        document.dispatchEvent(new CustomEvent('health-data-update', { 
          detail: { deviceId: selectedDeviceId, date: startDate } 
        }));
      }
    }) as EventListener);

    // Date range handler
    document.addEventListener('datepicker-range-end', ((e: CustomEvent) => {
      const selectedDate = e.detail;
      // selectedDate is now already a formatted date string (YYYY-MM-DD) from DatePickerCard
      const formattedDate = typeof selectedDate === 'string' ? selectedDate : selectedDate.toISOString().split('T')[0];
      startDate = formattedDate;
      endDate = formattedDate;
      
      // Update StatisticsCards with selected date
      document.dispatchEvent(new CustomEvent('date-change', { detail: formattedDate }));
      
      if (selectedDeviceId) {
        // Trigger health data update
        document.dispatchEvent(new CustomEvent('health-data-update', { 
          detail: { deviceId: selectedDeviceId, date: formattedDate } 
        }));
      }
    }) as EventListener);
  });
</script>

<Layout title="Smartwatch Monitoring Solution">
  <Sidebar />
  <Header title="Vital Signs" />

  <main class="ml-0 md:ml-64 pt-20 p-6">
    <div class="grid grid-cols-1 gap-6">
      <!-- Statistics Cards -->
      <StatisticsCards
        client:load
        deviceCount={devices.filter(device => device.status === 'published').length}
        sleepRecordsCount={sleepRecordsCount}
        deviceIds={devices.map(d => d.id).join(',')}
        heartRateStats={{
          avgBpm: healthStats.heartRate.avg,
          maxBpm: healthStats.heartRate.max,
          minBpm: healthStats.heartRate.min
        }}
        sleepStats={{
          avgDuration: 7,
          maxDuration: 9,
          minDuration: 6
        }}
        abnormalHeartRate={healthStats.abnormalHeartRate}
        abnormalBloodOxygen={healthStats.abnormalBloodOxygen}
      />

      <!-- Date Picker Card -->
      <DatePickerCard />

      <!-- Users and Health Tracking -->
      <div class="grid grid-cols-1 lg:grid-cols-12 gap-6">
        <VitalSignsDeviceList
          devices={devices}
          data-device-list
          client:load
          className="lg:col-span-5 xl:col-span-4"
        />
        <HealthChart
          selectedDeviceId={devices[0]?.id}
          client:load
          className="lg:col-span-7 xl:col-span-8"
        />
      </div>
    </div>
  </main>
</Layout>

<script>
  import Chart from 'chart.js/auto';

  window.onload = () => {
    // Health Tracking Chart
    const healthCtx = document.getElementById('healthChart') as HTMLCanvasElement;
    if (healthCtx) {
      new Chart(healthCtx, {
        type: 'line',
        data: {
          labels: Array.from({length: 24}, (_, i) => i.toString().padStart(2, '0')),
          datasets: [
            {
              label: 'Heart Rate',
              data: [150, 142, 155, 145, 148, 152, 145, 149, 146, 151, 147, 143, 146, 150, 144, 147, 145, 148, 146, 149, 145, 147, 146, 148],
              borderColor: '#EF4444',
              tension: 0.4,
              fill: false
            },
            {
              label: 'Blood Oxygen',
              data: [98, 97, 98, 96, 97, 98, 97, 96, 98, 97, 96, 98, 97, 96, 98, 97, 96, 98, 97, 96, 98, 97, 96, 98],
              borderColor: '#3B82F6',
              tension: 0.4,
              fill: false
            },
            {
              label: 'Breath Rate',
              data: [72, 70, 73, 71, 72, 74, 71, 73, 72, 70, 72, 71, 73, 72, 70, 72, 71, 73, 72, 70, 72, 71, 73, 72],
              borderColor: '#10B981',
              tension: 0.4,
              fill: false
            },
            {
              label: 'Stress',
              data: [25, 28, 24, 26, 27, 23, 25, 24, 26, 25, 27, 24, 26, 25, 28, 24, 26, 25, 27, 24, 26, 25, 28, 24],
              borderColor: '#F59E0B',
              tension: 0.4,
              fill: false
            }
          ]
        },
        options: {
          responsive: true,
          maintainAspectRatio: false,
          plugins: {
            legend: {
              display: false
            }
          },
          scales: {
            y: {
              beginAtZero: true,
              grid: {
                display: true,
                drawBorder: false
              }
            },
            x: {
              grid: {
                display: false
              }
            }
          }
        }
      });
    }

    // Sleep Monitoring Donut Chart
    const sleepCtx = document.getElementById('sleepChart') as HTMLCanvasElement;
    if (sleepCtx) {
      new Chart(sleepCtx, {
        type: 'doughnut',
        data: {
          labels: ['Awake', 'Deep Sleep', 'Light Sleep'],
          datasets: [{
            data: [40, 50, 10],
            backgroundColor: ['#FCD34D', '#93C5FD', '#10B981'],
            borderWidth: 0
          }]
        },
        options: {
          responsive: true,
          maintainAspectRatio: false,
          cutout: '70%',
          plugins: {
            legend: {
              display: false
            }
          }
        }
      });
    }
  };
</script>
