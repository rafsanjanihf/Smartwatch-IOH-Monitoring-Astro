---
import Layout from '../layouts/Layout.astro';
import Sidebar from '../components/Sidebar.astro';
import Header from '../components/Header.astro';
import DatePickerCard from '../components/DatePickerCard.astro';
import DeviceList from '../components/DeviceList';
import SleepSummary from '../components/SleepSummary';
import SleepTrackingChart from '../components/SleepTrackingChart';
import SleepChart from '../components/SleepChart';
import SleepAnalytics from '../components/SleepAnalytics';
import { api } from '../utils/api';
import type { Device, Health, SleepData } from '../types';
import { useState } from 'react';
import StatisticsCards from '../components/StatisticsCards';
import moment from 'moment';
import { Datepicker } from 'flowbite';
import * as Sentry from "@sentry/browser";

// Fetch data devices
let devices: Device[] = [];
try {
  devices = await api.getAllDevices();
} catch (error) {
  console.error('Error fetching devices:', error);
}

// Fetch getDeviceSleepData
let sleepByDevice: SleepData[] = [];
try {
  if (devices.length > 0) {
    const today = new Date();
    const startDate = new Date(today);
    startDate.setDate(today.getDate() - 7); // Default 7 hari terakhir

    sleepByDevice = await api.getDeviceSleepData(
      devices[0].id,
      startDate.toISOString(),
      today.toISOString()
    );
  }
} catch (error) {
  console.error('Error fetching sleep by device:', error);
}

// Fetch all sleep data untuk menghitung total sleep records
let allSleepData: SleepData[] = [];
let sleepRecordsCount = 0;
try {
  if (devices.length > 0) {
    const deviceIds = devices.map(d => d.id).join(',');
    allSleepData = await api.getAllSleepData(deviceIds);
    
    // Hitung Normal Sleep + Abnormal Sleep (exclude No Data)
    sleepRecordsCount = allSleepData.filter(sleep => sleep.sleepTotalTime > 0).length;
  }
} catch (error) {
  console.error('Error fetching all sleep data:', error);
}

---

<script>
  // Initialize state
  let selectedDeviceId: string | null = null;
  let startDate: string | null = null;
  let endDate: string | null = null;

  // Add event listener for device selection and date range
  document.addEventListener('DOMContentLoaded', () => {
    // Device selection handler
    document.addEventListener('device-select', ((e: CustomEvent) => {
      selectedDeviceId = e.detail.deviceId;
      if (startDate && endDate) {
        fetchSleepData(selectedDeviceId, startDate, endDate);
      }
    }) as EventListener);

    // Date range handler
    document.addEventListener('datepicker-range-end', ((e: CustomEvent) => {
      const selectedDate = e.detail;
      // selectedDate is now already a formatted date string (YYYY-MM-DD) from DatePickerCard
      const formattedDate = typeof selectedDate === 'string' ? selectedDate : selectedDate.toISOString().split('T')[0];
      startDate = formattedDate;
      endDate = formattedDate;
      
      // Update StatisticsCards with selected date
      document.dispatchEvent(new CustomEvent('date-change', { detail: formattedDate }));
      
      if (selectedDeviceId) {
        fetchSleepData(selectedDeviceId, startDate, endDate);
      }
    }) as EventListener);
  });

  async function fetchSleepData(deviceId: string | null = null, start: string | null = null, end: string | null = null) {
    if (!deviceId) {
      console.warn('No device selected, skipping fetchSleepData');
      return; // Exit the function if deviceId is null or empty
    }

    try {
      // Fix timezone issue: use date string directly without UTC conversion
      const startDate = start || moment().format('YYYY-MM-DD');
      const endDate = end || moment().format('YYYY-MM-DD');
      
      const data = await api.getDeviceSleepData(deviceId, startDate, endDate);
      document.dispatchEvent(new CustomEvent('sleep-data-update', { detail: data }));
    } catch (error) {
      console.error('Error fetching sleep data:', error);
    }
  }
</script>

<Layout title="Smartwatch Monitoring Solution">
  <Sidebar />
  <Header title="Dashboard" />

  <main class="ml-0 md:ml-64 pt-20 p-6">
    <div class="grid grid-cols-1 gap-6">
      <StatisticsCards
        client:load
        deviceCount={devices.filter(device => device.status === 'published').length}
        sleepRecordsCount={sleepRecordsCount}
        deviceIds={devices.map(d => d.id).join(',')}
        heartRateStats={{
          avgBpm: 80,
          maxBpm: 100,
          minBpm: 60
        }}
        sleepStats={{
          avgDuration: 7,
          maxDuration: 9,
          minDuration: 6
        }}
      />

      <!-- Date Picker Card -->
      <DatePickerCard />

      <!-- Users and Health Tracking -->
      <div class="grid grid-cols-1 lg:grid-cols-12 gap-6">
        <DeviceList
          devices={devices}
          data-device-list
          client:load
          className="md:col-span-6 lg:col-span-5 xl:col-span-4"

        />
        <SleepChart
          sleepData={sleepByDevice}
          devices={devices}
          client:load
          className="md:col-span-6 lg:col-span-7 xl:col-span-8"
        />
      </div>

      <!-- Sleep Monitoring and Summary -->
      <div class="grid grid-cols-1 gap-6">
        <SleepTrackingChart
          sleepData={sleepByDevice}
          selectedDeviceId={devices[0].id}
          client:load
          className="md:flex-1"
        />
      </div>
    </div>
  </main>
</Layout>

