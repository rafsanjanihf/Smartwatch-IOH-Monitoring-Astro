---
import Layout from '../layouts/Layout.astro';
import Sidebar from '../components/Sidebar.astro';
import Header from '../components/Header.astro';
import DeviceList from '../components/DeviceList';
import SleepSummary from '../components/SleepSummary';
import SleepTrackingChart from '../components/SleepTrackingChart';
import SleepChart from '../components/SleepChart';
import SleepAnalytics from '../components/SleepAnalytics';
import { api } from '../utils/api';
import type { Device, Health, SleepData } from '../types';
import { useState } from 'react';
import StatisticsCards from '../components/StatisticsCards';
import moment from 'moment';
import { Datepicker } from 'flowbite';
import * as Sentry from "@sentry/browser";

// Fetch data devices
let devices: Device[] = [];
try {
  devices = await api.getAllDevices();
} catch (error) {
  console.error('Error fetching devices:', error);
}

// Fetch getDeviceSleepData
let sleepByDevice: SleepData[] = [];
try {
  if (devices.length > 0) {
    const today = new Date();
    const startDate = new Date(today);
    startDate.setDate(today.getDate() - 7); // Default 7 hari terakhir

    sleepByDevice = await api.getDeviceSleepData(
      devices[0].id,
      startDate.toISOString(),
      today.toISOString()
    );
  }
} catch (error) {
  console.error('Error fetching sleep by device:', error);
}

---

<script>
  // Initialize state
  let selectedDeviceId: string | null = null;
  let startDate: string | null = null;
  let endDate: string | null = null;

  endDate = (document.getElementById('datepicker-range-end') as HTMLInputElement)?.value;
  startDate = endDate;
  // Add event listener for device selection and date range
  document.addEventListener('DOMContentLoaded', () => {
    // Device selection handler
    document.addEventListener('device-select', ((e: CustomEvent) => {
      selectedDeviceId = e.detail.deviceId;
      if (startDate && endDate) {
        fetchSleepData(selectedDeviceId, startDate, endDate);
      }
    }) as EventListener);

    // Date range handler
    document.addEventListener('datepicker-range-end', ((e: CustomEvent) => {
      startDate = e.detail.start;
      endDate = e.detail.end;
      if (selectedDeviceId) {
        fetchSleepData(selectedDeviceId, startDate, endDate);
      }
    }) as EventListener);


  });

  async function fetchSleepData(deviceId: string | null = null, start: string | null = null, end: string | null = null) {
    if (!deviceId) {
      console.warn('No device selected, skipping fetchSleepData');
      return; // Exit the function if deviceId is null or empty
    }

    try {
      let url = `${import.meta.env.PUBLIC_API_URL}/api/sleep/device/${deviceId || ''}`;
      const params = new URLSearchParams();
      if (start) {
        params.append('startDate', start);
      } else {
        params.append('startDate', new Date().toISOString());
      }
      if (end) {
        params.append('endDate', end);
      } else {
        params.append('endDate', new Date().toISOString());
      }

      if (params.toString()) {
        url += `?${params.toString()}`;
      }

      const response = await fetch(url);
      if (!response.ok) throw new Error('Failed to fetch sleep data');

      const data = await response.json();
      document.dispatchEvent(new CustomEvent('sleep-data-update', { detail: data }));
    } catch (error) {
      console.error('Error fetching sleep data:', error);
    }
  }
</script>

<Layout title="Smartwatch Monitoring Solution">
  <Sidebar />
  <Header title="Dashboard" />

  <main class="ml-0 md:ml-64 pt-20 p-6">
    <div class="grid grid-cols-1 gap-6">
      <StatisticsCards
        client:load
        deviceCount={devices.filter(device => device.status === 'published').length}
        offlineCount={devices.filter(device => device.status !== 'published').length}
        heartRateStats={{
          avgBpm: 80,
          maxBpm: 100,
          minBpm: 60
        }}
        sleepStats={{
          avgDuration: 8,
          maxDuration: 10,
          minDuration: 6
        }}
      />

      <!-- Users and Health Tracking -->
      <div class="grid grid-cols-1 lg:grid-cols-12 gap-6">
        <DeviceList
          devices={devices}
          data-device-list
          client:load
          className="lg:col-span-5 xl:col-span-4"
        />
        <SleepChart
          sleepData={sleepByDevice}
          client:load
          className="lg:col-span-7 xl:col-span-8"
        />
      </div>

      <!-- Sleep Monitoring and Summary -->
      <div class="grid grid-cols-1 gap-6">
        <SleepTrackingChart
          sleepData={sleepByDevice}
          selectedDeviceId={devices[0].id}
          client:load
          className="md:flex-1"
        />
      </div>
    </div>
  </main>
</Layout>

